" github:etc/vim/vimrc
" -*- Mode: Vimrc; tab-width: 4; indent-tabs-mode: nil; -*-
"
"       Separate out vim settings into files in ~/etc/vim/rc.

" set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim72,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility

" NB debian warns modelines have historically been a source of security/resource
" vulnerabilities -- disable by default, even when 'nocompatible' is set
set modeline

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Sf=[3%dm
  set t_Sb=[4%dm
endif

" Some Debian-specific things
if has("autocmd")
  " set mail filetype for reportbug's temp files
  augroup debian
    au BufRead reportbug.*		set ft=mail
    au BufRead reportbug-*		set ft=mail
  augroup END
endif

" Set paper size from /etc/papersize if available (Debian-specific)
if filereadable("/etc/papersize")
  let s:papersize = matchstr(readfile('/etc/papersize', '', 1), '\p*')
  if strlen(s:papersize)
    exe "set printoptions+=paper:" . s:papersize
  endif
endif

if has('gui_running')
  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif

" Pathogen
" To disable a plugin, add it's bundle name to the following list
let g:pathogen_disabled = []

runtime bundle/vim-pathogen/autoload/pathogen.vim

"call add(g:pathogen_disabled, 'AutoTag')
"call add(g:pathogen_disabled, 'Colour-Sampler-Pack')
"call add(g:pathogen_disabled, 'dash.vim')
"call add(g:pathogen_disabled, 'file-line')
"call add(g:pathogen_disabled, 'funco.vim')
call add(g:pathogen_disabled, 'jslint.vim')
"call add(g:pathogen_disabled, 'nerdcommenter')
"call add(g:pathogen_disabled, 'numbers.vim')
"call add(g:pathogen_disabled, 'nerdtree')
"call add(g:pathogen_disabled, 'phpcomplete.vim')
"call add(g:pathogen_disabled, 'syntastic')
"call add(g:pathogen_disabled, 'SyntaxAttr.vim')
"call add(g:pathogen_disabled, 'taglist.vim')
call add(g:pathogen_disabled, 'tslime.vim')
"call add(g:pathogen_disabled, 'unicode.vim')
"call add(g:pathogen_disabled, 'unite.vim')
"call add(g:pathogen_disabled, 'vim-align')
"call add(g:pathogen_disabled, 'vim-fugitive')
"call add(g:pathogen_disabled, 'vimproc.vim')
call add(g:pathogen_disabled, 'vimroom')
"call add(g:pathogen_disabled, 'vim-rsi')
"call add(g:pathogen_disabled, 'vim-sensible')
"call add(g:pathogen_disabled, 'vim-surround')
"call add(g:pathogen_disabled, 'vim-tbone')

execute pathogen#infect()
call pathogen#helptags()

runtime! ~/etc/vim/rc/*

set modeline

" Configure wildmenu for command-line completion
set wildchar=<Tab>
set wildmode=full

set guifont=Monaco:h14
" Rodent everywhere
set mouse=a
" Fix window resizing in vim
set ttymouse=xterm2

" Turn off toolbar
set go=-t

" Soft spaces - 4 spaces per tab
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4

" Show line numbers
set number

" Mimic ruler with status line
set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\

""" syntastic setup
" Use >> to display syntax errors in the sign column
let g:syntastic_enable_signs=1
if exists("g:loaded_syntastic_plugin")
    " Add syntastic warnings to status
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
endif

syntax enable

""" snipmate setup
let g:snips_author = 'Benjamin Hawkes-Lewis'
let g:snips_email = 'benjamin.hawkes-lewis@visualdna.com'

""" vimroom setup
let g:vimroom_width = 80
let g:vimroom_sidebar_height = 0
let g:vimroom_background = 'Black'

function! s:ExecuteInShell(command)
        let command = join(map(split(a:command), 'expand(v:val)'))
        let winnr = bufwinnr('^' . command . '$')
        silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
        setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
        echo 'Execute ' . command . '...'
        silent! execute 'silent %!'. command
        silent! execute 'resize ' . line('$')
        silent! redraw
        silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
        silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
        echo 'Shell command ' . command . ' executed.'
endfunction

command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

" Make comments easier to see
hi Comment ctermfg=Magenta
" Make directories easier to see
hi Directory ctermfg=Green

" Make errors possible to see
hi SpellBad term=standout ctermfg=7 ctermbg=1

" Highlight lines longer than 80 chars
set colorcolumn=80

""" Shell scripts

" Assume Shell scripts are Bash if not otherwise specified
let g:is_bash = 1

" Strip trailing whitespace on write
autocmd BufWritePre <buffer> :%s/\s\+$//e

"""Set background dark as Vim's detection fails so much
set background=dark
